<Module>
    <ModulePrefs title="RUSSIAN RACING"/>
    <Content type="html">
        <![CDATA[ 
        <!DOCTYPE html> 
        <html lang="en-us"> 
            <head> 
                <meta charset="utf-8"/> 
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> 
                <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/> 
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/tz-6z-g-f/en@main/style.css"/> 
                <style> 
                    canvas:focus { outline: none; } 
                    html, body { 
                        padding: 0; 
                        margin: 0; 
                        overflow: hidden; 
                        -webkit-touch-callout: none; 
                        -webkit-user-select: none; 
                        -moz-user-select: none; 
                        -ms-user-select: none; 
                        user-select: none; 
                        -webkit-tap-highlight-color: rgba(0,0,0,0); 
                        height: 100%; 
                    } 
                </style> 
            </head> 
            <body class="dark"> 
                <div id="unity-container" class="unity-desktop"> 
                    <canvas id="unity-canvas" tabindex="-1"></canvas> 
                </div> 
                <div id="loading-cover" style="display:none;"> 
                    <div id="unity-loading-bar"> 
                        <div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/tz-6z-g-f/en@main/logoz.png"/></div> 
                        <div id="unity-progress-bar-empty" style="display: none;"> 
                            <div id="unity-progress-bar-full"></div> 
                            <div id="txtloadingw">RUSSIAN RACING - SSS</div> 
                        </div> 
                        <div class="spinner"></div> 
                    </div> 
                </div> 
                <script> 
                    async function mergeUnityWebFiles(baseUrl, filePrefix, totalParts, extension) { 
                        const partUrls = []; 
                        for (let i = 1; i <= totalParts; i++) { 
                            partUrls.push(`${baseUrl}/${filePrefix}_part${i}.${extension}`); 
                        } 
                        const buffers = []; 
                        for (let i = 0; i < totalParts; i++) { 
                            const response = await fetch(partUrls[i]); 
                            if (!response.ok) { 
                                throw new Error(`Failed to load part: ${partUrls[i]}`); 
                            } 
                            const buffer = await response.arrayBuffer(); 
                            buffers.push(buffer); 
                            const progress = ((i + 1) / totalParts) * 100; 
                            document.querySelector("#unity-progress-bar-full").style.width = `${progress}%`; 
                        } 
                        const totalLength = buffers.reduce((acc, buffer) => acc + buffer.byteLength, 0); 
                        const combinedBuffer = new Uint8Array(totalLength); 
                        let offset = 0; 
                        buffers.forEach((buffer) => { 
                            combinedBuffer.set(new Uint8Array(buffer), offset); 
                            offset += buffer.byteLength; 
                        }); 
                        return combinedBuffer; 
                    } 
                    const buildUrl = "https://cdn.jsdelivr.net/gh/tz-6z-g-f/en@main/Build"; 
                    const loaderUrl = buildUrl + "/RuDrift.loader.js"; 
                    const config = { 
                        dataUrl: null, 
                        frameworkUrl: buildUrl + "/RuDrift.framework.js.unityweb", 
                        codeUrl: buildUrl + "/RuDrift.wasm.unityweb", 
                        streamingAssetsUrl: "StreamingAssets", 
                        companyName: "DefaultCompany", 
                        productName: "Drift Tuner RU", 
                        productVersion: "1.0", 
                    }; 
                    const container = document.querySelector("#unity-container"); 
                    const canvas = document.querySelector("#unity-canvas"); 
                    const loadingCover = document.querySelector("#loading-cover"); 
                    const progressBarFull = document.querySelector("#unity-progress-bar-full"); 
                    const spinner = document.querySelector('.spinner'); 
                    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) { 
                        container.className = "unity-mobile"; 
                    } 
                    loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/tz-6z-g-f/en@main/background.png') center / cover"; 
                    loadingCover.style.display = ""; 
                    async function initializeGame() { 
                        try { 
                            const dataBuffer = await mergeUnityWebFiles(buildUrl, "RuDrift", 3, "data.unityweb"); 
                            const dataBlobUrl = URL.createObjectURL(new Blob([dataBuffer], { type: "application/octet-stream" })); 
                            config.dataUrl = dataBlobUrl; 
                            const unityLoader = document.createElement("script"); 
                            unityLoader.src = loaderUrl; 
                            unityLoader.onload = () => { 
                                createUnityInstance(canvas, config, (progress) => { 
                                    progressBarFull.style.width = 100 * progress + "%"; 
                                }).then((unityInstance) => { 
                                    myGameInstance = unityInstance; 
                                    loadingCover.style.display = "none"; 
                                }).catch((message) => { 
                                    alert(message); 
                                }); 
                            }; 
                            document.body.appendChild(unityLoader); 
                        } catch (error) { 
                            console.error("Unity yükleme hatası:", error); 
                        } 
                    } 
                    initializeGame(); 
                    document.addEventListener('contextmenu', event => event.preventDefault()); 
                    function FocusGame() { 
                        window.focus(); 
                        canvas.focus(); 
                    } 
                    window.addEventListener('pointerdown', FocusGame); 
                    window.addEventListener('touchstart', FocusGame); 
                    let myGameInstance; 
                    let initGame = false; 
                    window.addEventListener("unhandledrejection", function(event) { 
                        console.warn("Hata es geçildi:", event.reason); 
                        event.preventDefault(); 
                    }); 
                </script> 
            </body> 
        </html> 
        ]]>
    </Content>
</Module>
